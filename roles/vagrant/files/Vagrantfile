# -*- mode: ruby -*-
# # vi: set ft=ruby :
#Vagrant.require_plugin "vagrant-reload"

Vagrant.configure("2") do |config|

  config.ssh.username = 'root'
  config.ssh.password = 'toto'

  config.vm.synced_folder '.', '/vagrant', type: "nfs",
    nfs_version: 4,
    nfs_udp: false,
    linux__nfs_options: ['rw','no_subtree_check','no_root_squash','async']
  config.vm.synced_folder '/var/cache/pacman/pkg/', '/var/cache/pacman/pkg/', type: "nfs",
    nfs_version: 4,
    nfs_udp: false

  config.vm.provision "arch_setup", type: "ansible_local" do |ansible|
    ansible.inventory_path = "/vagrant/koaxiel/arch_install/inventory"
    ansible.playbook = "/vagrant/koaxiel/arch_install/main.yml"
    ansible.limit = "all"
    ansible.extra_vars = {
      root_password: "toto",
      hostname: "vmtiti"
    }
    ansible.verbose = 'vvv'
    ansible.tags = Shellwords.shellsplit(ENV['ANSIBLE_ARGS']) if ENV['ANSIBLE_ARGS']
  end

  #config.vm.provision "shell", inline: "ls /var/lib/pacman/"
  config.vm.provision :reload

  config.vm.provision "laptop", type: "ansible_local" do |ansible|
    ansible.inventory_path = "/vagrant/koaxiel/laptop_setup/inventory"
    ansible.playbook = "/vagrant/koaxiel/laptop_setup/main.yml"
    ansible.limit = "all"
    ansible.extra_vars = {
      user_password: "toto",
      username: "titi"
    }
    ansible.verbose = 'vvv'
    ansible.tags = Shellwords.shellsplit(ENV['ANSIBLE_ARGS']) if ENV['ANSIBLE_ARGS']
  end

  config.vm.define :archlinux do |archlinux|
    # Box name
    #
    archlinux.vm.box = "archlinux"

    # Domain Specific Options
    #
    # See README for more info.
    #

    # Options for libvirt vagrant provider.
    archlinux.vm.provider :libvirt do |libvirt|

      # A hypervisor name to access. Different drivers can be specified, but
      # this version of provider creates KVM machines only. Some examples of
      # drivers are kvm (qemu hardware accelerated), qemu (qemu emulated),
      # xen (Xen hypervisor), lxc (Linux Containers),
      # esx (VMware ESX), vmwarews (VMware Workstation) and more. Refer to
      # documentation for available drivers (http://libvirt.org/drivers.html).
      libvirt.driver = 'kvm'

      # The name of the server, where libvirtd is running.
      # libvirt.host = "localhost"

      # If use ssh tunnel to connect to Libvirt.
      #libvirt.connect_via_ssh = false

      # The username and password to access Libvirt. Password is not used when
      # connecting via ssh.
      #libvirt.username = 'root'
      #libvirt.password = "secret"

      # Libvirt storage pool name, where box image and instance snapshots will
      # be stored.
      libvirt.storage_pool_name = "default"

      # Set a prefix for the machines that's different than the project dir name.
      #libvirt.default_prefix = ''

      libvirt.memory = 2024
      libvirt.cpus = 2
      libvirt.cpu_mode = 'host-passthrough'

      libvirt.disk_bus = 'sata'
      libvirt.storage :file, :device => :cdrom, :path => '/var/lib/libvirt/images/archlinux-2019.03.10-x86_64.iso'
      libvirt.loader = '/usr/share/ovmf/x64/OVMF_CODE.fd'
      libvirt.boot 'hd'
      libvirt.boot 'cdrom'

      libvirt.graphics_type = 'spice'
      libvirt.keymap = 'fr'
      libvirt.video_type = 'virtio'

      libvirt.management_network_name = 'default'
      libvirt.management_network_address = '192.168.122.0/24'
    end

  end

end
